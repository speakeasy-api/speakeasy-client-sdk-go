// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package v3

// Generated from OpenAPI doc version 0.4.0 and generator version 2.672.0

import (
	"context"
	"fmt"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/internal/config"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/internal/globals"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/internal/hooks"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/retry"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"net/http"
	"time"
)

const (
	ServerProd string = "prod"
)

// ServerList contains the list of servers available to the SDK
var ServerList = map[string]string{
	ServerProd: "https://api.prod.speakeasy.com",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// Speakeasy API: The Subscriptions API manages subscriptions for CLI and registry events
//
// /docs - The Speakeasy Platform Documentation
type Speakeasy struct {
	SDKVersion string
	// REST APIs for working with Registry artifacts
	Artifacts *Artifacts
	// REST APIs for managing Authentication
	Auth *Auth
	// REST APIs for retrieving Code Samples
	CodeSamples *CodeSamples
	// REST APIs for managing the github integration
	Github *Github
	// REST APIs for managing Organizations (speakeasy L1 Tenancy construct)
	Organizations    *Organizations
	PublishingTokens *PublishingTokens
	// REST APIs for managing reports (lint reports, change reports, etc)
	Reports     *Reports
	SchemaStore *SchemaStore
	// REST APIs for managing short URLs
	ShortURLs *ShortURLs
	// REST APIs for managing subscriptions
	Subscriptions *Subscriptions
	// REST APIs for managing LLM OAS suggestions
	Suggest *Suggest
	// REST APIs for managing Workspaces (speakeasy tenancy)
	Workspaces *Workspaces
	// REST APIs for managing events captured by a speakeasy binary (CLI, GitHub Action etc)
	Events *Events

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*Speakeasy)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Speakeasy) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServer allows the overriding of the default server by name
func WithServer(server string) SDKOption {
	return func(sdk *Speakeasy) {
		_, ok := ServerList[server]
		if !ok {
			panic(fmt.Errorf("server %s not found", server))
		}

		sdk.sdkConfiguration.Server = server
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (shared.Security, error)) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

// WithWorkspaceID allows setting the WorkspaceID parameter for all supported operations
func WithWorkspaceID(workspaceID string) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.Globals.WorkspaceID = &workspaceID
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Speakeasy) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Speakeasy {
	sdk := &Speakeasy{
		SDKVersion: "3.27.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 3.27.0 2.672.0 0.4.0 github.com/speakeasy-api/speakeasy-client-sdk-go/v3",
			Globals:    globals.Globals{},
			ServerList: ServerList,
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Artifacts = newArtifacts(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Auth = newAuth(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.CodeSamples = newCodeSamples(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Github = newGithub(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Organizations = newOrganizations(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PublishingTokens = newPublishingTokens(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Reports = newReports(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.SchemaStore = newSchemaStore(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ShortURLs = newShortURLs(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Subscriptions = newSubscriptions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Suggest = newSuggest(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Workspaces = newWorkspaces(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Events = newEvents(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
