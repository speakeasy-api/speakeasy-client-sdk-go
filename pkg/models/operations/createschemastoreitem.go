// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type Format string

const (
	FormatJSON Format = "json"
	FormatYaml Format = "yaml"
)

func (e Format) ToPointer() *Format {
	return &e
}
func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "yaml":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

type CreateSchemaStoreItemRequestBody struct {
	Format Format `json:"format"`
	Spec   string `json:"spec"`
}

func (o *CreateSchemaStoreItemRequestBody) GetFormat() Format {
	if o == nil {
		return Format("")
	}
	return o.Format
}

func (o *CreateSchemaStoreItemRequestBody) GetSpec() string {
	if o == nil {
		return ""
	}
	return o.Spec
}

type CreateSchemaStoreItemResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	SchemaStoreItem *shared.SchemaStoreItem
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateSchemaStoreItemResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateSchemaStoreItemResponse) GetSchemaStoreItem() *shared.SchemaStoreItem {
	if o == nil {
		return nil
	}
	return o.SchemaStoreItem
}

func (o *CreateSchemaStoreItemResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateSchemaStoreItemResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
