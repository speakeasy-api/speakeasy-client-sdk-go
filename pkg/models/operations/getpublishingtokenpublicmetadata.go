// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"net/http"
	"time"
)

type GetPublishingTokenPublicMetadataRequest struct {
	// Unique identifier of the publishing token.
	TokenID string `pathParam:"style=simple,explode=false,name=tokenID"`
}

func (o *GetPublishingTokenPublicMetadataRequest) GetTokenID() string {
	if o == nil {
		return ""
	}
	return o.TokenID
}

// GetPublishingTokenPublicMetadataResponseBody - OK
type GetPublishingTokenPublicMetadataResponseBody struct {
	OrganizationID *string    `json:"organization_id,omitempty"`
	TargetID       *string    `json:"target_id,omitempty"`
	TargetResource *string    `json:"target_resource,omitempty"`
	ValidUntil     *time.Time `json:"valid_until,omitempty"`
	WorkspaceID    *string    `json:"workspace_id,omitempty"`
}

func (g GetPublishingTokenPublicMetadataResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPublishingTokenPublicMetadataResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetPublishingTokenPublicMetadataResponseBody) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *GetPublishingTokenPublicMetadataResponseBody) GetTargetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetID
}

func (o *GetPublishingTokenPublicMetadataResponseBody) GetTargetResource() *string {
	if o == nil {
		return nil
	}
	return o.TargetResource
}

func (o *GetPublishingTokenPublicMetadataResponseBody) GetValidUntil() *time.Time {
	if o == nil {
		return nil
	}
	return o.ValidUntil
}

func (o *GetPublishingTokenPublicMetadataResponseBody) GetWorkspaceID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

type GetPublishingTokenPublicMetadataResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Object *GetPublishingTokenPublicMetadataResponseBody
}

func (o *GetPublishingTokenPublicMetadataResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetPublishingTokenPublicMetadataResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetPublishingTokenPublicMetadataResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetPublishingTokenPublicMetadataResponse) GetObject() *GetPublishingTokenPublicMetadataResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
