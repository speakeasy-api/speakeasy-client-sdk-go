// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"net/http"
)

type SearchWorkspaceEventsGlobals struct {
	WorkspaceID *string `pathParam:"style=simple,explode=false,name=workspace_id"`
}

func (o *SearchWorkspaceEventsGlobals) GetWorkspaceID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

type SearchWorkspaceEventsRequest struct {
	// Shared execution ID for cli events across a single action.
	ExecutionID *string `queryParam:"style=form,explode=true,name=execution_id"`
	// A specific gen lock ID for the events.
	GenerateGenLockID *string `queryParam:"style=form,explode=true,name=generate_gen_lock_id"`
	// Specified interaction type for events.
	InteractionType *shared.InteractionType `queryParam:"style=form,explode=true,name=interaction_type"`
	// Number of results to return.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Unique identifier of the lint report digest.
	LintReportDigest *string `queryParam:"style=form,explode=true,name=lint_report_digest"`
	// Unique identifier of the openapi diff report digest.
	OpenapiDiffReportDigest *string `queryParam:"style=form,explode=true,name=openapi_diff_report_digest"`
	// Unique identifier of the source revision digest.
	SourceRevisionDigest *string `queryParam:"style=form,explode=true,name=source_revision_digest"`
	// Whether the event was successful or not.
	Success *bool `queryParam:"style=form,explode=true,name=success"`
	// Unique identifier of the workspace.
	WorkspaceID *string `pathParam:"style=simple,explode=false,name=workspace_id"`
}

func (o *SearchWorkspaceEventsRequest) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *SearchWorkspaceEventsRequest) GetGenerateGenLockID() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockID
}

func (o *SearchWorkspaceEventsRequest) GetInteractionType() *shared.InteractionType {
	if o == nil {
		return nil
	}
	return o.InteractionType
}

func (o *SearchWorkspaceEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SearchWorkspaceEventsRequest) GetLintReportDigest() *string {
	if o == nil {
		return nil
	}
	return o.LintReportDigest
}

func (o *SearchWorkspaceEventsRequest) GetOpenapiDiffReportDigest() *string {
	if o == nil {
		return nil
	}
	return o.OpenapiDiffReportDigest
}

func (o *SearchWorkspaceEventsRequest) GetSourceRevisionDigest() *string {
	if o == nil {
		return nil
	}
	return o.SourceRevisionDigest
}

func (o *SearchWorkspaceEventsRequest) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *SearchWorkspaceEventsRequest) GetWorkspaceID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

type SearchWorkspaceEventsResponse struct {
	// Success
	CliEventBatch []shared.CliEvent
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *SearchWorkspaceEventsResponse) GetCliEventBatch() []shared.CliEvent {
	if o == nil {
		return nil
	}
	return o.CliEventBatch
}

func (o *SearchWorkspaceEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SearchWorkspaceEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SearchWorkspaceEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
