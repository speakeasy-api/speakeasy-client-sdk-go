// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DepthStyle string

const (
	DepthStyleOriginal DepthStyle = "original"
	DepthStyleFlat     DepthStyle = "flat"
	DepthStyleNested   DepthStyle = "nested"
	DepthStyleDeep     DepthStyle = "deep"
)

func (e DepthStyle) ToPointer() *DepthStyle {
	return &e
}
func (e *DepthStyle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "original":
		fallthrough
	case "flat":
		fallthrough
	case "nested":
		fallthrough
	case "deep":
		*e = DepthStyle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DepthStyle: %v", v)
	}
}

type Style string

const (
	StyleStandardize Style = "standardize"
	StyleResource    Style = "resource"
)

func (e Style) ToPointer() *Style {
	return &e
}
func (e *Style) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standardize":
		fallthrough
	case "resource":
		*e = Style(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Style: %v", v)
	}
}

type Opts struct {
	DepthStyle *DepthStyle `json:"depth_style,omitempty"`
	Style      *Style      `json:"style,omitempty"`
}

func (o *Opts) GetDepthStyle() *DepthStyle {
	if o == nil {
		return nil
	}
	return o.DepthStyle
}

func (o *Opts) GetStyle() *Style {
	if o == nil {
		return nil
	}
	return o.Style
}

type Schema struct {
	Content  []byte `multipartForm:"content"`
	FileName string `multipartForm:"name=schema"`
}

func (o *Schema) GetContent() []byte {
	if o == nil {
		return []byte{}
	}
	return o.Content
}

func (o *Schema) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

// SuggestOperationIDsRequestBody - The schema file to upload provided as a multipart/form-data file segment.
type SuggestOperationIDsRequestBody struct {
	Opts   *Opts  `multipartForm:"name=opts,json"`
	Schema Schema `multipartForm:"file"`
}

func (o *SuggestOperationIDsRequestBody) GetOpts() *Opts {
	if o == nil {
		return nil
	}
	return o.Opts
}

func (o *SuggestOperationIDsRequestBody) GetSchema() Schema {
	if o == nil {
		return Schema{}
	}
	return o.Schema
}

// SuggestOperationIDsSuggestion - OK
type SuggestOperationIDsSuggestion struct {
	OperationIds map[string][]string `json:"operation_ids"`
}

func (o *SuggestOperationIDsSuggestion) GetOperationIds() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.OperationIds
}

type SuggestOperationIDsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	Suggestion *SuggestOperationIDsSuggestion
}

func (o *SuggestOperationIDsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SuggestOperationIDsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SuggestOperationIDsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *SuggestOperationIDsResponse) GetSuggestion() *SuggestOperationIDsSuggestion {
	if o == nil {
		return nil
	}
	return o.Suggestion
}
