// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v2/pkg/utils"
	"time"
)

type CliEvent struct {
	// Remote commit ID.
	CommitHead *string `json:"commit_head,omitempty"`
	// Timestamp when the event was created in the database.
	CreatedAt time.Time `json:"created_at"`
	// Duration of the event in milliseconds.
	DurationMs *int64 `json:"duration_ms,omitempty"`
	// Unique identifier for each execution of the CLI.
	ExecutionID string `json:"execution_id"`
	// GitHub organization of the action.
	GhActionOrganization *string `json:"gh_action_organization,omitempty"`
	// GitHub repository of the action.
	GhActionRepository *string `json:"gh_action_repository,omitempty"`
	// Link to the GitHub action run.
	GhActionRunLink *string `json:"gh_action_run_link,omitempty"`
	// Version of the GitHub action.
	GhActionVersion *string `json:"gh_action_version,omitempty"`
	// Current working directory relative to the git root.
	GitRelativeCwd *string `json:"git_relative_cwd,omitempty"`
	// Default repository name for git remote.
	GitRemoteDefaultRepo *string `json:"git_remote_default_repo,omitempty"`
	// Default username for git remote.
	GitRemoteDefaultUsername *string `json:"git_remote_default_username,omitempty"`
	// User email from git configuration.
	GitUserEmail *string `json:"git_user_email,omitempty"`
	// User name from git configuration.
	GitUserName *string `json:"git_user_name,omitempty"`
	// Remote hostname.
	Hostname *string `json:"hostname,omitempty"`
	// Unique identifier for each event.
	ID string `json:"id"`
	// Type of interaction.
	InteractionType string `json:"interaction_type"`
	// Timestamp when the event completed, in local time.
	LocalCompletedAt time.Time `json:"local_completed_at"`
	// Timestamp when the event started, in local time.
	LocalStartedAt time.Time `json:"local_started_at"`
	// Full CLI command.
	RawCommand *string `json:"raw_command,omitempty"`
	// Label of the git repository.
	RepoLabel *string `json:"repo_label,omitempty"`
	// Identifier of the Speakeasy API key.
	SpeakeasyAPIKeyID string `json:"speakeasy_api_key_id"`
	// Version of the Speakeasy CLI.
	SpeakeasyVersion string `json:"speakeasy_version"`
	// Indicates whether the event was successful.
	Success bool `json:"success"`
	// Identifier of the workspace.
	WorkspaceID string `json:"workspace_id"`
}

func (c CliEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CliEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CliEvent) GetCommitHead() *string {
	if o == nil {
		return nil
	}
	return o.CommitHead
}

func (o *CliEvent) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CliEvent) GetDurationMs() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationMs
}

func (o *CliEvent) GetExecutionID() string {
	if o == nil {
		return ""
	}
	return o.ExecutionID
}

func (o *CliEvent) GetGhActionOrganization() *string {
	if o == nil {
		return nil
	}
	return o.GhActionOrganization
}

func (o *CliEvent) GetGhActionRepository() *string {
	if o == nil {
		return nil
	}
	return o.GhActionRepository
}

func (o *CliEvent) GetGhActionRunLink() *string {
	if o == nil {
		return nil
	}
	return o.GhActionRunLink
}

func (o *CliEvent) GetGhActionVersion() *string {
	if o == nil {
		return nil
	}
	return o.GhActionVersion
}

func (o *CliEvent) GetGitRelativeCwd() *string {
	if o == nil {
		return nil
	}
	return o.GitRelativeCwd
}

func (o *CliEvent) GetGitRemoteDefaultRepo() *string {
	if o == nil {
		return nil
	}
	return o.GitRemoteDefaultRepo
}

func (o *CliEvent) GetGitRemoteDefaultUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitRemoteDefaultUsername
}

func (o *CliEvent) GetGitUserEmail() *string {
	if o == nil {
		return nil
	}
	return o.GitUserEmail
}

func (o *CliEvent) GetGitUserName() *string {
	if o == nil {
		return nil
	}
	return o.GitUserName
}

func (o *CliEvent) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *CliEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CliEvent) GetInteractionType() string {
	if o == nil {
		return ""
	}
	return o.InteractionType
}

func (o *CliEvent) GetLocalCompletedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LocalCompletedAt
}

func (o *CliEvent) GetLocalStartedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LocalStartedAt
}

func (o *CliEvent) GetRawCommand() *string {
	if o == nil {
		return nil
	}
	return o.RawCommand
}

func (o *CliEvent) GetRepoLabel() *string {
	if o == nil {
		return nil
	}
	return o.RepoLabel
}

func (o *CliEvent) GetSpeakeasyAPIKeyID() string {
	if o == nil {
		return ""
	}
	return o.SpeakeasyAPIKeyID
}

func (o *CliEvent) GetSpeakeasyVersion() string {
	if o == nil {
		return ""
	}
	return o.SpeakeasyVersion
}

func (o *CliEvent) GetSuccess() bool {
	if o == nil {
		return false
	}
	return o.Success
}

func (o *CliEvent) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}
