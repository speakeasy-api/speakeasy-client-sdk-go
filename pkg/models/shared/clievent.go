// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"time"
)

// GenerateBumpType - Bump type of the lock file (calculated semver delta, or a custom change (manual release))
type GenerateBumpType string

const (
	GenerateBumpTypeMajor  GenerateBumpType = "major"
	GenerateBumpTypeMinor  GenerateBumpType = "minor"
	GenerateBumpTypePatch  GenerateBumpType = "patch"
	GenerateBumpTypeCustom GenerateBumpType = "custom"
	GenerateBumpTypeNone   GenerateBumpType = "none"
)

func (e GenerateBumpType) ToPointer() *GenerateBumpType {
	return &e
}

func (e *GenerateBumpType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "major":
		fallthrough
	case "minor":
		fallthrough
	case "patch":
		fallthrough
	case "custom":
		fallthrough
	case "none":
		*e = GenerateBumpType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GenerateBumpType: %v", v)
	}
}

// InteractionType - Type of interaction.
type InteractionType string

const (
	InteractionTypeCliExec        InteractionType = "CLI_EXEC"
	InteractionTypeTargetGenerate InteractionType = "TARGET_GENERATE"
	InteractionTypeAuthenticate   InteractionType = "AUTHENTICATE"
	InteractionTypeQuickstart     InteractionType = "QUICKSTART"
	InteractionTypeRun            InteractionType = "RUN"
	InteractionTypeConfigure      InteractionType = "CONFIGURE"
	InteractionTypePublish        InteractionType = "PUBLISH"
)

func (e InteractionType) ToPointer() *InteractionType {
	return &e
}

func (e *InteractionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CLI_EXEC":
		fallthrough
	case "TARGET_GENERATE":
		fallthrough
	case "AUTHENTICATE":
		fallthrough
	case "QUICKSTART":
		fallthrough
	case "RUN":
		fallthrough
	case "CONFIGURE":
		fallthrough
	case "PUBLISH":
		*e = InteractionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InteractionType: %v", v)
	}
}

type CliEvent struct {
	// Remote commit ID.
	CommitHead *string `json:"commit_head,omitempty"`
	// Timestamp when the event was created in the database.
	CreatedAt time.Time `json:"created_at"`
	// Duration of the event in milliseconds.
	DurationMs *int64 `json:"duration_ms,omitempty"`
	// Unique identifier for each execution of the CLI.
	ExecutionID string `json:"execution_id"`
	// Bump type of the lock file (calculated semver delta, or a custom change (manual release))
	GenerateBumpType *GenerateBumpType `json:"generate_bump_type,omitempty"`
	// Checksum of the configuration file (post generation)
	GenerateConfigPostChecksum *string `json:"generate_config_post_checksum,omitempty"`
	// Rendered configuration file (post generation)
	GenerateConfigPostRaw *string `json:"generate_config_post_raw,omitempty"`
	// The version of the customer's SDK that we just generated
	GenerateConfigPostVersion *string `json:"generate_config_post_version,omitempty"`
	// Checksum of the configuration file (prior to generation)
	GenerateConfigPreChecksum *string `json:"generate_config_pre_checksum,omitempty"`
	// Rendered configuration file (prior to generation)
	GenerateConfigPreRaw *string `json:"generate_config_pre_raw,omitempty"`
	// The version of the customer's SDK before we generated
	GenerateConfigPreVersion *string `json:"generate_config_pre_version,omitempty"`
	// gen.lock ID (expected to be a uuid).
	GenerateGenLockID *string `json:"generate_gen_lock_id,omitempty"`
	// Features post generation
	GenerateGenLockPostFeatures *string `json:"generate_gen_lock_post_features,omitempty"`
	// Checksum of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
	GenerateGenLockPreDocChecksum *string `json:"generate_gen_lock_pre_doc_checksum,omitempty"`
	// info.Version of the Previous Rendered OpenAPI document (prior to generation, via gen lock)
	GenerateGenLockPreDocVersion *string `json:"generate_gen_lock_pre_doc_version,omitempty"`
	// Features prior to generation
	GenerateGenLockPreFeatures *string `json:"generate_gen_lock_pre_features,omitempty"`
	// Artifact version for the Previous Generation
	GenerateGenLockPreVersion *string `json:"generate_gen_lock_pre_version,omitempty"`
	// Indicates whether tests were output.
	GenerateOutputTests *bool `json:"generate_output_tests,omitempty"`
	// Indicates whether the target was considered published.
	GeneratePublished *bool `json:"generate_published,omitempty"`
	// Expected Repo URL, for use in documentation generation.
	GenerateRepoURL *string `json:"generate_repo_url,omitempty"`
	// The target of the event.
	GenerateTarget *string `json:"generate_target,omitempty"`
	// The version of the target.
	GenerateTargetVersion *string `json:"generate_target_version,omitempty"`
	// Version of the generation logic used.
	GenerateVersion *string `json:"generate_version,omitempty"`
	// GitHub organization of the action.
	GhActionOrganization *string `json:"gh_action_organization,omitempty"`
	// GitHub repository of the action.
	GhActionRepository *string `json:"gh_action_repository,omitempty"`
	// Link to the GitHub action run.
	GhActionRunLink *string `json:"gh_action_run_link,omitempty"`
	// Version of the GitHub action.
	GhActionVersion *string `json:"gh_action_version,omitempty"`
	// Current working directory relative to the git root.
	GitRelativeCwd *string `json:"git_relative_cwd,omitempty"`
	// Default owner for git remote.
	GitRemoteDefaultOwner *string `json:"git_remote_default_owner,omitempty"`
	// Default repository name for git remote.
	GitRemoteDefaultRepo *string `json:"git_remote_default_repo,omitempty"`
	// User email from git configuration.
	GitUserEmail *string `json:"git_user_email,omitempty"`
	// User name from git configuration.
	GitUserName *string `json:"git_user_name,omitempty"`
	// Remote hostname.
	Hostname *string `json:"hostname,omitempty"`
	// Unique identifier for each event.
	ID string `json:"id"`
	// Type of interaction.
	InteractionType InteractionType `json:"interaction_type"`
	// Timestamp when the event completed, in local time.
	LocalCompletedAt *time.Time `json:"local_completed_at,omitempty"`
	// Timestamp when the event started, in local time.
	LocalStartedAt time.Time `json:"local_started_at"`
	// Checksum of the currently Rendered OpenAPI document.
	ManagementDocChecksum *string `json:"management_doc_checksum,omitempty"`
	// Version taken from info.version field of the Rendered OpenAPI document.
	ManagementDocVersion *string `json:"management_doc_version,omitempty"`
	// Name of the published package.
	PublishPackageName *string `json:"publish_package_name,omitempty"`
	// Name of the registry where the package was published.
	PublishPackageRegistryName *string `json:"publish_package_registry_name,omitempty"`
	// URL of the published package.
	PublishPackageURL *string `json:"publish_package_url,omitempty"`
	// Version of the published package.
	PublishPackageVersion *string `json:"publish_package_version,omitempty"`
	// Full CLI command.
	RawCommand *string `json:"raw_command,omitempty"`
	// Label of the git repository.
	RepoLabel *string `json:"repo_label,omitempty"`
	// Identifier of the Speakeasy API key.
	SpeakeasyAPIKeyName string `json:"speakeasy_api_key_name"`
	// Version of the Speakeasy CLI.
	SpeakeasyVersion string `json:"speakeasy_version"`
	// Indicates whether the event was successful.
	Success bool `json:"success"`
	// Identifier of the workspace.
	WorkspaceID string `json:"workspace_id"`
}

func (c CliEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CliEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CliEvent) GetCommitHead() *string {
	if o == nil {
		return nil
	}
	return o.CommitHead
}

func (o *CliEvent) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *CliEvent) GetDurationMs() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationMs
}

func (o *CliEvent) GetExecutionID() string {
	if o == nil {
		return ""
	}
	return o.ExecutionID
}

func (o *CliEvent) GetGenerateBumpType() *GenerateBumpType {
	if o == nil {
		return nil
	}
	return o.GenerateBumpType
}

func (o *CliEvent) GetGenerateConfigPostChecksum() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPostChecksum
}

func (o *CliEvent) GetGenerateConfigPostRaw() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPostRaw
}

func (o *CliEvent) GetGenerateConfigPostVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPostVersion
}

func (o *CliEvent) GetGenerateConfigPreChecksum() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPreChecksum
}

func (o *CliEvent) GetGenerateConfigPreRaw() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPreRaw
}

func (o *CliEvent) GetGenerateConfigPreVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPreVersion
}

func (o *CliEvent) GetGenerateGenLockID() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockID
}

func (o *CliEvent) GetGenerateGenLockPostFeatures() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockPostFeatures
}

func (o *CliEvent) GetGenerateGenLockPreDocChecksum() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockPreDocChecksum
}

func (o *CliEvent) GetGenerateGenLockPreDocVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockPreDocVersion
}

func (o *CliEvent) GetGenerateGenLockPreFeatures() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockPreFeatures
}

func (o *CliEvent) GetGenerateGenLockPreVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockPreVersion
}

func (o *CliEvent) GetGenerateOutputTests() *bool {
	if o == nil {
		return nil
	}
	return o.GenerateOutputTests
}

func (o *CliEvent) GetGeneratePublished() *bool {
	if o == nil {
		return nil
	}
	return o.GeneratePublished
}

func (o *CliEvent) GetGenerateRepoURL() *string {
	if o == nil {
		return nil
	}
	return o.GenerateRepoURL
}

func (o *CliEvent) GetGenerateTarget() *string {
	if o == nil {
		return nil
	}
	return o.GenerateTarget
}

func (o *CliEvent) GetGenerateTargetVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateTargetVersion
}

func (o *CliEvent) GetGenerateVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateVersion
}

func (o *CliEvent) GetGhActionOrganization() *string {
	if o == nil {
		return nil
	}
	return o.GhActionOrganization
}

func (o *CliEvent) GetGhActionRepository() *string {
	if o == nil {
		return nil
	}
	return o.GhActionRepository
}

func (o *CliEvent) GetGhActionRunLink() *string {
	if o == nil {
		return nil
	}
	return o.GhActionRunLink
}

func (o *CliEvent) GetGhActionVersion() *string {
	if o == nil {
		return nil
	}
	return o.GhActionVersion
}

func (o *CliEvent) GetGitRelativeCwd() *string {
	if o == nil {
		return nil
	}
	return o.GitRelativeCwd
}

func (o *CliEvent) GetGitRemoteDefaultOwner() *string {
	if o == nil {
		return nil
	}
	return o.GitRemoteDefaultOwner
}

func (o *CliEvent) GetGitRemoteDefaultRepo() *string {
	if o == nil {
		return nil
	}
	return o.GitRemoteDefaultRepo
}

func (o *CliEvent) GetGitUserEmail() *string {
	if o == nil {
		return nil
	}
	return o.GitUserEmail
}

func (o *CliEvent) GetGitUserName() *string {
	if o == nil {
		return nil
	}
	return o.GitUserName
}

func (o *CliEvent) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *CliEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CliEvent) GetInteractionType() InteractionType {
	if o == nil {
		return InteractionType("")
	}
	return o.InteractionType
}

func (o *CliEvent) GetLocalCompletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LocalCompletedAt
}

func (o *CliEvent) GetLocalStartedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LocalStartedAt
}

func (o *CliEvent) GetManagementDocChecksum() *string {
	if o == nil {
		return nil
	}
	return o.ManagementDocChecksum
}

func (o *CliEvent) GetManagementDocVersion() *string {
	if o == nil {
		return nil
	}
	return o.ManagementDocVersion
}

func (o *CliEvent) GetPublishPackageName() *string {
	if o == nil {
		return nil
	}
	return o.PublishPackageName
}

func (o *CliEvent) GetPublishPackageRegistryName() *string {
	if o == nil {
		return nil
	}
	return o.PublishPackageRegistryName
}

func (o *CliEvent) GetPublishPackageURL() *string {
	if o == nil {
		return nil
	}
	return o.PublishPackageURL
}

func (o *CliEvent) GetPublishPackageVersion() *string {
	if o == nil {
		return nil
	}
	return o.PublishPackageVersion
}

func (o *CliEvent) GetRawCommand() *string {
	if o == nil {
		return nil
	}
	return o.RawCommand
}

func (o *CliEvent) GetRepoLabel() *string {
	if o == nil {
		return nil
	}
	return o.RepoLabel
}

func (o *CliEvent) GetSpeakeasyAPIKeyName() string {
	if o == nil {
		return ""
	}
	return o.SpeakeasyAPIKeyName
}

func (o *CliEvent) GetSpeakeasyVersion() string {
	if o == nil {
		return ""
	}
	return o.SpeakeasyVersion
}

func (o *CliEvent) GetSuccess() bool {
	if o == nil {
		return false
	}
	return o.Success
}

func (o *CliEvent) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}
