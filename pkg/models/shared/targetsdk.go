// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"time"
)

type TargetSDK struct {
	// Remote commit ID.
	CommitHead *string `json:"commit_head,omitempty"`
	// Timestamp when the event was created in the database.
	CreatedAt time.Time `json:"created_at"`
	// Version of the generated target (post generation)
	GenerateConfigPostVersion *string `json:"generate_config_post_version,omitempty"`
	// gen.lock ID (expected to be a uuid).
	GenerateGenLockID *string `json:"generate_gen_lock_id,omitempty"`
	// Indicates whether the target was considered published.
	GeneratePublished *bool `json:"generate_published,omitempty"`
	// The target of the event.
	GenerateTarget string `json:"generate_target"`
	// The version of the target.
	GenerateTargetVersion *string `json:"generate_target_version,omitempty"`
	// Current working directory relative to the git root.
	GitRelativeCwd *string `json:"git_relative_cwd,omitempty"`
	// Default owner for git remote.
	GitRemoteDefaultOwner *string `json:"git_remote_default_owner,omitempty"`
	// Default repository name for git remote.
	GitRemoteDefaultRepo *string `json:"git_remote_default_repo,omitempty"`
	// Unique identifier for each event.
	ID string `json:"id"`
	// Indicates whether the event was successful.
	Success *bool `json:"success,omitempty"`
}

func (t TargetSDK) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TargetSDK) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TargetSDK) GetCommitHead() *string {
	if o == nil {
		return nil
	}
	return o.CommitHead
}

func (o *TargetSDK) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TargetSDK) GetGenerateConfigPostVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateConfigPostVersion
}

func (o *TargetSDK) GetGenerateGenLockID() *string {
	if o == nil {
		return nil
	}
	return o.GenerateGenLockID
}

func (o *TargetSDK) GetGeneratePublished() *bool {
	if o == nil {
		return nil
	}
	return o.GeneratePublished
}

func (o *TargetSDK) GetGenerateTarget() string {
	if o == nil {
		return ""
	}
	return o.GenerateTarget
}

func (o *TargetSDK) GetGenerateTargetVersion() *string {
	if o == nil {
		return nil
	}
	return o.GenerateTargetVersion
}

func (o *TargetSDK) GetGitRelativeCwd() *string {
	if o == nil {
		return nil
	}
	return o.GitRelativeCwd
}

func (o *TargetSDK) GetGitRemoteDefaultOwner() *string {
	if o == nil {
		return nil
	}
	return o.GitRemoteDefaultOwner
}

func (o *TargetSDK) GetGitRemoteDefaultRepo() *string {
	if o == nil {
		return nil
	}
	return o.GitRemoteDefaultRepo
}

func (o *TargetSDK) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TargetSDK) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}
