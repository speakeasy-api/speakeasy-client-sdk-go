// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"time"
)

type FeatureFlagFeatureFlag string

const (
	FeatureFlagFeatureFlagChangesReport      FeatureFlagFeatureFlag = "changes_report"
	FeatureFlagFeatureFlagSchemaRegistry     FeatureFlagFeatureFlag = "schema_registry"
	FeatureFlagFeatureFlagSkipSchemaRegistry FeatureFlagFeatureFlag = "skip_schema_registry"
)

func (e FeatureFlagFeatureFlag) ToPointer() *FeatureFlagFeatureFlag {
	return &e
}

func (e *FeatureFlagFeatureFlag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "changes_report":
		fallthrough
	case "schema_registry":
		fallthrough
	case "skip_schema_registry":
		*e = FeatureFlagFeatureFlag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeatureFlagFeatureFlag: %v", v)
	}
}

// FeatureFlag - A feature flag is a key-value pair that can be used to enable or disable features.
type FeatureFlag struct {
	FeatureFlag *FeatureFlagFeatureFlag `json:"feature_flag,omitempty"`
	TrialEndsAt *time.Time              `json:"trial_ends_at,omitempty"`
}

func (f FeatureFlag) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FeatureFlag) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FeatureFlag) GetFeatureFlag() *FeatureFlagFeatureFlag {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *FeatureFlag) GetTrialEndsAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.TrialEndsAt
}
