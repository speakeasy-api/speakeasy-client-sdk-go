// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestGithub_CheckGithubAccess(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("checkGithubAccess")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.CheckAccess(ctx, operations.CheckGithubAccessRequest{
		Org:  "<value>",
		Repo: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestGithub_GithubConfigureCodeSamples(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("githubConfigureCodeSamples")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.ConfigureCodeSamples(ctx, shared.GithubConfigureCodeSamplesRequest{
		Org:        "<value>",
		Repo:       "<value>",
		TargetName: "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.GithubConfigureCodeSamplesResponse)
	assert.Equal(t, &shared.GithubConfigureCodeSamplesResponse{
		CodeSampleOverlayRegistryURL: "https://giving-handover.net",
		Source: shared.WorkflowDocument{
			Location: "<value>",
		},
	}, res.GithubConfigureCodeSamplesResponse)

}

func TestGithub_GithubConfigureMintlifyRepo(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("githubConfigureMintlifyRepo")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.ConfigureMintlifyRepo(ctx, shared.GithubConfigureMintlifyRepoRequest{
		Input: "<value>",
		Org:   "<value>",
		Overlays: []string{
			"<value>",
		},
		Repo: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestGithub_GithubConfigureTarget(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("githubConfigureTarget")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.ConfigureTarget(ctx, shared.GithubConfigureTargetRequest{
		Org:      "<value>",
		RepoName: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestGithub_GetGithubSetupState(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("getGithubSetupState")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.GetSetup(ctx, operations.GetGithubSetupStateRequest{
		GenerateGenLockID: "<id>",
		Org:               "<value>",
		Repo:              "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.GithubSetupStateResponse)
	assert.Equal(t, &shared.GithubSetupStateResponse{
		Actions: shared.Actions{
			GenerationActionConfigured: false,
			PublishActionConfigured:    false,
		},
		AppInstalled: false,
		Secrets: shared.Secrets{
			APIKeyConfigured:            true,
			PublishingSecretsConfigured: true,
		},
	}, res.GithubSetupStateResponse)

}

func TestGithub_LinkGithubAccess(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("linkGithubAccess")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.LinkGithub(ctx, operations.LinkGithubAccessRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestGithub_GithubStorePublishingSecrets(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("githubStorePublishingSecrets")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.StorePublishingSecrets(ctx, shared.GithubStorePublishingSecretsRequest{
		GenerateGenLockID: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestGithub_GithubTriggerAction(t *testing.T) {
	ctx := context.Background()

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("githubTriggerAction")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Github.TriggerAction(ctx, shared.GithubTriggerActionRequest{
		GenLockID: "<id>",
		Org:       "<value>",
		RepoName:  "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}
