// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/types"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestOrganizations_CreateOrganization(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createOrganization")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.Create(ctx, shared.Organization{
		AccountType:       shared.AccountTypeScaleUp,
		CreatedAt:         types.MustTimeFromString("2023-12-01T17:06:07.804Z"),
		ID:                "<id>",
		Name:              "<value>",
		Slug:              "<value>",
		SsoActivated:      true,
		TelemetryDisabled: true,
		UpdatedAt:         types.MustTimeFromString("2022-05-28T06:20:22.766Z"),
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Organization)
	assert.Equal(t, &shared.Organization{
		AccountType:       shared.AccountTypeFree,
		CreatedAt:         types.MustTimeFromString("2024-05-22T22:27:14.379Z"),
		ID:                "<id>",
		Name:              "<value>",
		Slug:              "<value>",
		SsoActivated:      false,
		TelemetryDisabled: false,
		UpdatedAt:         types.MustTimeFromString("2022-01-01T02:16:41.381Z"),
	}, res.Organization)

}

func TestOrganizations_CreateFreeTrial(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createFreeTrial")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.CreateFreeTrial(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestOrganizations_GetOrganization(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getOrganization")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.Get(ctx, operations.GetOrganizationRequest{
		OrganizationID: "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Organization)
	assert.Equal(t, &shared.Organization{
		AccountType:       shared.AccountTypeBusiness,
		CreatedAt:         types.MustTimeFromString("2023-09-05T11:33:52.011Z"),
		ID:                "<id>",
		Name:              "<value>",
		Slug:              "<value>",
		SsoActivated:      false,
		TelemetryDisabled: false,
		UpdatedAt:         types.MustTimeFromString("2023-07-26T06:33:15.810Z"),
	}, res.Organization)

}

func TestOrganizations_GetOrganizations(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getOrganizations")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.GetAll(ctx)
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Organizations)
	assert.Equal(t, []shared.Organization{
		shared.Organization{
			AccountType:       shared.AccountTypeFree,
			CreatedAt:         types.MustTimeFromString("2023-10-18T22:25:06.537Z"),
			ID:                "<id>",
			Name:              "<value>",
			Slug:              "<value>",
			SsoActivated:      true,
			TelemetryDisabled: false,
			UpdatedAt:         types.MustTimeFromString("2022-01-18T20:59:19.735Z"),
		},
	}, res.Organizations)

}

func TestOrganizations_GetOrganizationUsage(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getOrganizationUsage")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.GetUsage(ctx)
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.OrganizationUsageResponse)
	assert.Equal(t, &shared.OrganizationUsageResponse{
		AllowedLanguages:      []string{},
		TotalAllowedLanguages: 863126,
		Usage: []shared.OrganizationUsage{
			shared.OrganizationUsage{
				Accessible: false,
				AccessibleFeatures: []string{
					"<value>",
				},
				GenLockIds: []string{
					"<value>",
					"<value>",
					"<value>",
				},
				Language:           "<value>",
				MaxOperations:      224089,
				NumberOfOperations: 939867,
				UsedFeatures: []string{
					"<value>",
					"<value>",
					"<value>",
				},
				Workspaces: []string{
					"<value>",
				},
			},
			shared.OrganizationUsage{
				Accessible: false,
				AccessibleFeatures: []string{
					"<value>",
				},
				GenLockIds: []string{
					"<value>",
					"<value>",
					"<value>",
				},
				Language:           "<value>",
				MaxOperations:      863126,
				NumberOfOperations: 478406,
				UsedFeatures: []string{
					"<value>",
					"<value>",
				},
				Workspaces: []string{
					"<value>",
				},
			},
		},
	}, res.OrganizationUsageResponse)

}

func TestOrganizations_CreateBillingAddOns(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createBillingAddOns")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.CreateBillingAddOns(ctx, shared.OrganizationBillingAddOnRequest{
		AddOns: []shared.BillingAddOn{
			shared.BillingAddOnSDKTesting,
			shared.BillingAddOnSDKTesting,
			shared.BillingAddOnWebhooks,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestOrganizations_DeleteBillingAddOn(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteBillingAddOn")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.DeleteBillingAddOn(ctx, operations.DeleteBillingAddOnRequest{
		AddOn: shared.BillingAddOnCustomCodeRegions,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestOrganizations_GetBillingAddOns(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getBillingAddOns")

	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(testHTTPClient),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Organizations.GetBillingAddOns(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}
