// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/types"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestWorkspaces_CreateWorkspace(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createWorkspace")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.Create(ctx, shared.Workspace{
		CreatedAt:         types.MustTimeFromString("2023-06-18T07:14:55.338Z"),
		ID:                "<id>",
		Name:              "<value>",
		OrganizationID:    "<id>",
		Slug:              "<value>",
		TelemetryDisabled: v3.Bool(false),
		UpdatedAt:         types.MustTimeFromString("2023-04-03T12:48:32.253Z"),
		Verified:          true,
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Workspace)
	assert.Equal(t, &shared.Workspace{
		CreatedAt:         types.MustTimeFromString("2022-03-17T15:39:20.911Z"),
		ID:                "<id>",
		Name:              "<value>",
		OrganizationID:    "<id>",
		Slug:              "<value>",
		TelemetryDisabled: v3.Bool(false),
		UpdatedAt:         types.MustTimeFromString("2024-11-08T08:43:39.394Z"),
		Verified:          true,
	}, res.Workspace)

}

func TestWorkspaces_GetWorkspaceByContext(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWorkspaceByContext")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.Get(ctx)
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.WorkspaceAndOrganization)
	assert.Equal(t, &shared.WorkspaceAndOrganization{
		Organization: shared.Organization{
			AccountType:       shared.AccountTypeBusiness,
			CreatedAt:         types.MustTimeFromString("2023-09-05T11:33:52.011Z"),
			ID:                "<id>",
			Name:              "<value>",
			Slug:              "<value>",
			SsoActivated:      false,
			TelemetryDisabled: false,
			UpdatedAt:         types.MustTimeFromString("2023-07-26T06:33:15.810Z"),
		},
		Workspace: shared.Workspace{
			CreatedAt:         types.MustTimeFromString("2024-11-29T01:50:48.954Z"),
			ID:                "<id>",
			Name:              "<value>",
			OrganizationID:    "<id>",
			Slug:              "<value>",
			TelemetryDisabled: v3.Bool(true),
			UpdatedAt:         types.MustTimeFromString("2023-05-10T02:28:23.533Z"),
			Verified:          true,
		},
	}, res.WorkspaceAndOrganization)

}

func TestWorkspaces_GetWorkspaces(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWorkspaces")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.GetAll(ctx)
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Workspaces)
	assert.Equal(t, []shared.Workspace{
		shared.Workspace{
			CreatedAt:         types.MustTimeFromString("2022-03-06T21:36:22.528Z"),
			ID:                "<id>",
			Name:              "<value>",
			OrganizationID:    "<id>",
			Slug:              "<value>",
			TelemetryDisabled: v3.Bool(false),
			UpdatedAt:         types.MustTimeFromString("2023-12-15T17:14:28.501Z"),
			Verified:          true,
		},
	}, res.Workspaces)

}

func TestWorkspaces_GetWorkspace(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWorkspace")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.GetByID(ctx, operations.GetWorkspaceRequest{
		WorkspaceID: v3.String("<id>"),
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Workspace)
	assert.Equal(t, &shared.Workspace{
		CreatedAt:         types.MustTimeFromString("2024-11-17T10:14:22.985Z"),
		ID:                "<id>",
		Name:              "<value>",
		OrganizationID:    "<id>",
		Slug:              "<value>",
		TelemetryDisabled: v3.Bool(false),
		UpdatedAt:         types.MustTimeFromString("2024-10-23T07:17:30.329Z"),
		Verified:          false,
	}, res.Workspace)

}

func TestWorkspaces_GetWorkspaceFeatureFlags(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWorkspaceFeatureFlags")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.GetFeatureFlags(ctx, operations.GetWorkspaceFeatureFlagsRequest{
		WorkspaceID: v3.String("<id>"),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestWorkspaces_GetWorkspaceSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWorkspaceSettings")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.GetSettings(ctx, operations.GetWorkspaceSettingsRequest{
		WorkspaceID: v3.String("<id>"),
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.WorkspaceSettings)
	assert.Equal(t, &shared.WorkspaceSettings{
		CreatedAt:   types.MustTimeFromString("2024-05-29T22:34:47.605Z"),
		UpdatedAt:   types.MustTimeFromString("2023-02-24T21:50:01.663Z"),
		WebhookURL:  "https://different-amendment.com/",
		WorkspaceID: "<id>",
	}, res.WorkspaceSettings)

}

func TestWorkspaces_UpdateWorkspaceSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateWorkspaceSettings")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.UpdateSettings(ctx, operations.UpdateWorkspaceSettingsRequest{
		WorkspaceSettings: shared.WorkspaceSettings{
			CreatedAt:   types.MustTimeFromString("2022-07-05T11:43:28.305Z"),
			UpdatedAt:   types.MustTimeFromString("2023-05-15T05:39:21.874Z"),
			WebhookURL:  "https://grown-pharmacopoeia.net",
			WorkspaceID: "<id>",
		},
		WorkspaceID: v3.String("<id>"),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)

}

func TestWorkspaces_SetWorkspaceFeatureFlags(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("setWorkspaceFeatureFlags")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.Workspaces.SetFeatureFlags(ctx, shared.WorkspaceFeatureFlagRequest{
		FeatureFlags: []shared.WorkspaceFeatureFlag{
			shared.WorkspaceFeatureFlagSkipSchemaRegistry,
			shared.WorkspaceFeatureFlagWebhooks,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
	assert.NotNil(t, res.WorkspaceFeatureFlagResponse)
	assert.Equal(t, &shared.WorkspaceFeatureFlagResponse{}, res.WorkspaceFeatureFlagResponse)

}

func TestWorkspaces_GetPublishingToken(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPublishingToken")

	s := v3.New(
		v3.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		v3.WithClient(testHTTPClient),
		v3.WithSecurity(shared.Security{
			APIKey: v3.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	res, err := s.PublishingTokens.List(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
	assert.NotNil(t, res.Classes)
	assert.Equal(t, []shared.PublishingToken{
		shared.PublishingToken{
			CreatedAt:      types.MustTimeFromString("2023-01-18T23:26:03.849Z"),
			CreatedBy:      "<value>",
			ID:             "<id>",
			OrganizationID: "<id>",
			TargetID:       "<id>",
			Token:          "<value>",
			TokenName:      "<value>",
			ValidUntil:     types.MustTimeFromString("2024-08-24T11:59:25.466Z"),
			WorkspaceID:    "<id>",
		},
		shared.PublishingToken{
			CreatedAt:      types.MustTimeFromString("2023-08-07T04:00:26.830Z"),
			CreatedBy:      "<value>",
			ID:             "<id>",
			OrganizationID: "<id>",
			TargetID:       "<id>",
			Token:          "<value>",
			TokenName:      "<value>",
			ValidUntil:     types.MustTimeFromString("2025-02-22T20:20:27.935Z"),
			WorkspaceID:    "<id>",
		},
		shared.PublishingToken{
			CreatedAt:      types.MustTimeFromString("2024-01-27T14:50:38.288Z"),
			CreatedBy:      "<value>",
			ID:             "<id>",
			OrganizationID: "<id>",
			TargetID:       "<id>",
			Token:          "<value>",
			TokenName:      "<value>",
			ValidUntil:     types.MustTimeFromString("2024-10-22T15:05:16.239Z"),
			WorkspaceID:    "<id>",
		},
	}, res.Classes)

}
