// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// PullRequestMetadata - This can only be populated when the github app is installed for a repo
type PullRequestMetadata struct {
	Status    *string    `json:"status,omitempty"`
	Title     *string    `json:"title,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// truncated to first 1000 characters
	Description *string `json:"description,omitempty"`
	HeadBranch  *string `json:"head_branch,omitempty"`
	BaseBranch  *string `json:"base_branch,omitempty"`
	CanMerge    *bool   `json:"can_merge,omitempty"`
	// List of github labels
	Labels []string `json:"labels,omitempty"`
	// List of github handles
	RequestedReviewers []string `json:"requested_reviewers,omitempty"`
}

func (p PullRequestMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PullRequestMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PullRequestMetadata) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PullRequestMetadata) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *PullRequestMetadata) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PullRequestMetadata) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PullRequestMetadata) GetHeadBranch() *string {
	if o == nil {
		return nil
	}
	return o.HeadBranch
}

func (o *PullRequestMetadata) GetBaseBranch() *string {
	if o == nil {
		return nil
	}
	return o.BaseBranch
}

func (o *PullRequestMetadata) GetCanMerge() *bool {
	if o == nil {
		return nil
	}
	return o.CanMerge
}

func (o *PullRequestMetadata) GetLabels() []string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *PullRequestMetadata) GetRequestedReviewers() []string {
	if o == nil {
		return nil
	}
	return o.RequestedReviewers
}

// GithubPublishingPRResponse - Open generation PRs pending publishing
type GithubPublishingPRResponse struct {
	PullRequest    *string `json:"pull_request,omitempty"`
	PendingVersion *string `json:"pending_version,omitempty"`
	// This can only be populated when the github app is installed for a repo
	PullRequestMetadata *PullRequestMetadata `json:"pull_request_metadata,omitempty"`
}

func (o *GithubPublishingPRResponse) GetPullRequest() *string {
	if o == nil {
		return nil
	}
	return o.PullRequest
}

func (o *GithubPublishingPRResponse) GetPendingVersion() *string {
	if o == nil {
		return nil
	}
	return o.PendingVersion
}

func (o *GithubPublishingPRResponse) GetPullRequestMetadata() *PullRequestMetadata {
	if o == nil {
		return nil
	}
	return o.PullRequestMetadata
}
