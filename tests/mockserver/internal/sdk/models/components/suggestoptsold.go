// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type SuggestionType string

const (
	SuggestionTypeMethodNames     SuggestionType = "method-names"
	SuggestionTypeDiagnosticsOnly SuggestionType = "diagnostics-only"
)

func (e SuggestionType) ToPointer() *SuggestionType {
	return &e
}
func (e *SuggestionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "method-names":
		fallthrough
	case "diagnostics-only":
		*e = SuggestionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SuggestionType: %v", v)
	}
}

type SuggestOptsOld struct {
	Diagnostics    []Diagnostic   `json:"diagnostics,omitempty"`
	SuggestionType SuggestionType `json:"suggestion_type"`
}

func (o *SuggestOptsOld) GetDiagnostics() []Diagnostic {
	if o == nil {
		return nil
	}
	return o.Diagnostics
}

func (o *SuggestOptsOld) GetSuggestionType() SuggestionType {
	if o == nil {
		return SuggestionType("")
	}
	return o.SuggestionType
}
