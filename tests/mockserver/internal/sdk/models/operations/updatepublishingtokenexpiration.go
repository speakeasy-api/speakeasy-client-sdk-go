// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// UpdatePublishingTokenExpirationRequestBody - The publishing token to update
type UpdatePublishingTokenExpirationRequestBody struct {
	// The new expiration date for the publishing token.
	ValidUntil time.Time `json:"valid_until"`
	// The new name for the publishing token.
	TokenName *string `json:"token_name,omitempty"`
}

func (u UpdatePublishingTokenExpirationRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdatePublishingTokenExpirationRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePublishingTokenExpirationRequestBody) GetValidUntil() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ValidUntil
}

func (o *UpdatePublishingTokenExpirationRequestBody) GetTokenName() *string {
	if o == nil {
		return nil
	}
	return o.TokenName
}

type UpdatePublishingTokenExpirationRequest struct {
	// Unique identifier of the publishing token.
	TokenID string `pathParam:"style=simple,explode=false,name=tokenID"`
	// The publishing token to update
	RequestBody *UpdatePublishingTokenExpirationRequestBody `request:"mediaType=application/json"`
}

func (o *UpdatePublishingTokenExpirationRequest) GetTokenID() string {
	if o == nil {
		return ""
	}
	return o.TokenID
}

func (o *UpdatePublishingTokenExpirationRequest) GetRequestBody() *UpdatePublishingTokenExpirationRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdatePublishingTokenExpirationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdatePublishingTokenExpirationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
