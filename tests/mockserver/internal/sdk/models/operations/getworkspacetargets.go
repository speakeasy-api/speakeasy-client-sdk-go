// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetWorkspaceTargetsRequest struct {
	// Filter to only return targets with events created after this timestamp
	AfterLastEventCreatedAt *time.Time `queryParam:"style=form,explode=true,name=after_last_event_created_at"`
}

func (g GetWorkspaceTargetsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWorkspaceTargetsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetWorkspaceTargetsRequest) GetAfterLastEventCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.AfterLastEventCreatedAt
}

type GetWorkspaceTargetsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	TargetSDKList []components.TargetSDK
}

func (o *GetWorkspaceTargetsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWorkspaceTargetsResponse) GetTargetSDKList() []components.TargetSDK {
	if o == nil {
		return nil
	}
	return o.TargetSDKList
}
