// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package server

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"mockserver/internal/logging"
	"net/http"
	"time"
)

const (
	// Default address for server listening.
	DefaultAddress = ":18080"
)

// Server implements the HTTP server.
type Server struct {
	// Address for server listening.
	address string

	// Directory for raw HTTP request and response files.
	httpFileDir *logging.HTTPFileDirectory

	// Logger implementation.
	logger *slog.Logger

	// Underlying mux implementation.
	mux *http.ServeMux

	// Underlying server implementation.
	server *http.Server
}

// NewServer creates a new Server instance.
func NewServer(ctx context.Context, opts ...ServerOption) (*Server, error) {
	// Initialize with defaults.
	result := &Server{
		address: DefaultAddress,
		logger:  slog.Default(),
		mux:     http.NewServeMux(),
	}

	// Customize based on ServerOption.
	for _, opt := range opts {
		err := opt(result)

		if err != nil {
			return result, err
		}
	}

	result.server = &http.Server{
		Addr:     result.address,
		Handler:  logging.HTTPLoggerHandler(result.logger, result.mux),
		ErrorLog: slog.NewLogLogger(result.logger.Handler(), slog.LevelError),
	}

	httpFileDir, err := logging.NewHTTPFileDirectory("")

	if err != nil {
		return result, err
	}

	err = httpFileDir.Clean()

	if err != nil {
		return result, err
	}

	result.httpFileDir = httpFileDir

	result.registerGeneratedHandlers(ctx)
	result.registerInternalHandlers(ctx)

	return result, err
}

// Address returns the server address including protocol, hostname, and port.
func (s *Server) Address() string {
	return "http://localhost" + s.address
}

// RegisterHandler adds a new HTTP handler for the given pattern.
//
// Valid patterns are defined by [http.ServeMux].
func (s *Server) RegisterHandler(ctx context.Context, pattern string, handler http.Handler) {
	s.logger.DebugContext(ctx, "registering handler for pattern "+pattern)
	s.mux.Handle(pattern, handler)
}

// RegisterHandler adds a new HTTP handler function for the given pattern.
//
// Valid patterns are defined by [http.ServeMux].
func (s *Server) RegisterHandlerFunc(ctx context.Context, pattern string, handlerFunc http.HandlerFunc) {
	s.logger.DebugContext(ctx, "registering handler for pattern "+pattern)
	s.mux.HandleFunc(pattern, handlerFunc)
}

// Serve starts the server.
func (s *Server) Serve(ctx context.Context) error {
	s.logger.InfoContext(ctx, "starting server with address "+s.server.Addr)

	err := s.server.ListenAndServe()

	if errors.Is(err, http.ErrServerClosed) {
		return nil
	}

	return fmt.Errorf("error running server: %w", err)
}

// Shutdown gracefully stops the server.
func (s *Server) Shutdown(ctx context.Context) error {
	s.logger.WarnContext(ctx, "shutting down server")
	s.server.SetKeepAlivesEnabled(false)

	ctx, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()

	err := s.server.Shutdown(ctx)

	if err != nil {
		return fmt.Errorf("error shutting down server: %w", err)
	}

	return nil
}
