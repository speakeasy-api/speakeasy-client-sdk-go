// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"net/http"
)

func pathGetV1ApisAPIIDAPIEndpoints(dir *logging.HTTPFileDirectory) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")

		switch test {
		case "getAllApiEndpoints":
			dir.HandlerFunc("getAllApiEndpoints", testGetAllAPIEndpointsGetAllAPIEndpoints)(w, req)
		default:
			http.Error(w, "Unknown test: "+test, http.StatusBadRequest)
		}
	}
}

func testGetAllAPIEndpointsGetAllAPIEndpoints(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.SecurityHeader(req, "x-api-key", true); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.SecurityHeader(req, "x-workspace-identifier", true); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := []components.APIEndpoint{
		components.APIEndpoint{
			APIEndpointID: "<id>",
			APIID:         "<id>",
			CreatedAt:     types.MustTimeFromString("2023-01-29T03:25:40.769Z"),
			Description:   "proliferate anenst gadzooks gosh without frightfully",
			DisplayName:   "Mireille.Wolff",
			Method:        "<value>",
			Path:          "/boot/defaults",
			UpdatedAt:     types.MustTimeFromString("2023-01-23T16:26:38.331Z"),
			VersionID:     "<id>",
			WorkspaceID:   "<id>",
		},
		components.APIEndpoint{
			APIEndpointID: "<id>",
			APIID:         "<id>",
			CreatedAt:     types.MustTimeFromString("2022-09-08T17:07:17.627Z"),
			Description:   "remark whoever for ignorance yahoo integer competent really tempting",
			DisplayName:   "Aliya.Hammes",
			Method:        "<value>",
			Path:          "/boot",
			UpdatedAt:     types.MustTimeFromString("2024-01-01T08:51:16.176Z"),
			VersionID:     "<id>",
			WorkspaceID:   "<id>",
		},
		components.APIEndpoint{
			APIEndpointID: "<id>",
			APIID:         "<id>",
			CreatedAt:     types.MustTimeFromString("2024-05-10T15:45:00.302Z"),
			Description:   "rudely acclaimed sentimental aircraft book",
			DisplayName:   "Cathrine_Cummerata",
			Method:        "<value>",
			Path:          "/opt/lib",
			UpdatedAt:     types.MustTimeFromString("2024-11-01T08:41:53.910Z"),
			VersionID:     "<id>",
			WorkspaceID:   "<id>",
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
