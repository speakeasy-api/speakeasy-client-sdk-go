// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1CodeSample(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getCodeSamples[0]":
			dir.HandlerFunc("getCodeSamples", testGetCodeSamplesGetCodeSamples0)(w, req)
		case "getCodeSamples-default[0]":
			dir.HandlerFunc("getCodeSamples", testGetCodeSamplesGetCodeSamplesDefault0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetCodeSamplesGetCodeSamples0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.SecurityHeader(req, "x-api-key", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.SecurityHeader(req, "x-workspace-identifier", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.UsageSnippets = &components.UsageSnippets{
		Snippets: []components.UsageSnippet{
			components.UsageSnippet{
				Path:        "/tmp",
				Method:      "<value>",
				OperationID: "<id>",
				Language:    "<value>",
				Code:        "<value>",
			},
			components.UsageSnippet{
				Path:        "/opt/share",
				Method:      "<value>",
				OperationID: "<id>",
				Language:    "<value>",
				Code:        "<value>",
			},
			components.UsageSnippet{
				Path:        "/usr/src",
				Method:      "<value>",
				OperationID: "<id>",
				Language:    "<value>",
				Code:        "<value>",
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}

func testGetCodeSamplesGetCodeSamplesDefault0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.SecurityHeader(req, "x-api-key", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.SecurityHeader(req, "x-workspace-identifier", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.UsageSnippets = &components.UsageSnippets{
		Snippets: []components.UsageSnippet{
			components.UsageSnippet{
				Path:        "/pet/{id}",
				Method:      "get",
				OperationID: "getPetById",
				Language:    "typescript",
				Code: "import { Petstore } from \"petstore-sdk\";\n" +
					"\n" +
					"const petstore = new Petstore({\n" +
					"  apiKey: \"<YOUR_API_KEY_HERE>\",\n" +
					"});\n" +
					"\n" +
					"async function run() {\n" +
					"  const result = await petstore.pet.getById({\n" +
					"    id: 137396,\n" +
					"  });\n" +
					"\n" +
					"  // Handle the result\n" +
					"  console.log(result);\n" +
					"}\n" +
					"\n" +
					"run();",
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
