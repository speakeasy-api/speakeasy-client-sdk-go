// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	speakeasyclientsdkgo "github.com/speakeasy-api/speakeasy-client-sdk-go/v3"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/operations"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/models/shared"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/types"
	"github.com/speakeasy-api/speakeasy-client-sdk-go/v3/pkg/utils"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func TestSchemas_DeleteSchema(t *testing.T) {
	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("deleteSchema")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	ctx := context.Background()
	res, err := s.Schemas.DeleteSchema(ctx, operations.DeleteSchemaRequest{
		APIID:      "<value>",
		RevisionID: "<value>",
		VersionID:  "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
}

func TestSchemas_GetSchema(t *testing.T) {
	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("getSchema")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	ctx := context.Background()
	res, err := s.Schemas.GetSchema(ctx, operations.GetSchemaRequest{
		APIID:     "<value>",
		VersionID: "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Schema)
	assert.Equal(t, &shared.Schema{
		APIID:       "<id>",
		CreatedAt:   types.MustTimeFromString("2022-09-09T00:58:17.727Z"),
		Description: "polyester instead slowly than safely meh appropriate heroine free",
		RevisionID:  "<id>",
		VersionID:   "<id>",
		WorkspaceID: "<id>",
	}, res.Schema)
}

func TestSchemas_GetSchemaDiff(t *testing.T) {
	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("getSchemaDiff")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	ctx := context.Background()
	res, err := s.Schemas.GetSchemaDiff(ctx, operations.GetSchemaDiffRequest{
		APIID:            "<value>",
		BaseRevisionID:   "<value>",
		TargetRevisionID: "<value>",
		VersionID:        "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.SchemaDiff)
	assert.Equal(t, &shared.SchemaDiff{
		Additions: []string{
			"<value>",
		},
		Deletions: []string{
			"<value>",
			"<value>",
		},
		Modifications: map[string]shared.ValueChange{},
	}, res.SchemaDiff)
}

func TestSchemas_GetSchemaRevision(t *testing.T) {
	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("getSchemaRevision")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	ctx := context.Background()
	res, err := s.Schemas.GetSchemaRevision(ctx, operations.GetSchemaRevisionRequest{
		APIID:      "<value>",
		RevisionID: "<value>",
		VersionID:  "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Schema)
	assert.Equal(t, &shared.Schema{
		APIID:       "<id>",
		CreatedAt:   types.MustTimeFromString("2022-01-23T10:21:45.479Z"),
		Description: "woot neaten whoever submitter upon altruistic regarding",
		RevisionID:  "<id>",
		VersionID:   "<id>",
		WorkspaceID: "<id>",
	}, res.Schema)
}

func TestSchemas_GetSchemas(t *testing.T) {
	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("getSchemas")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	ctx := context.Background()
	res, err := s.Schemas.GetSchemas(ctx, operations.GetSchemasRequest{
		APIID:     "<value>",
		VersionID: "<value>",
	})
	require.NoError(t, err)
	assert.Contains(t, []any{200, 201, 202, 203, 204, 205, 206, 207, 208, 226}, res.StatusCode)
	assert.NotNil(t, res.Classes)
	assert.Equal(t, []shared.Schema{
		shared.Schema{
			APIID:       "<id>",
			CreatedAt:   types.MustTimeFromString("2022-09-25T21:22:14.779Z"),
			Description: "along rim woot minus",
			RevisionID:  "<id>",
			VersionID:   "<id>",
			WorkspaceID: "<id>",
		},
	}, res.Classes)
}

func TestSchemas_RegisterSchema(t *testing.T) {
	s := speakeasyclientsdkgo.New(
		speakeasyclientsdkgo.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		speakeasyclientsdkgo.WithClient(createTestHTTPClient("registerSchema")),
		speakeasyclientsdkgo.WithSecurity(shared.Security{
			APIKey: speakeasyclientsdkgo.String("<YOUR_API_KEY_HERE>"),
		}),
	)

	content, fileErr := os.Open("../.speakeasy/testfiles/example.file")
	require.NoError(t, fileErr)

	ctx := context.Background()
	res, err := s.Schemas.RegisterSchema(ctx, operations.RegisterSchemaRequest{
		RequestBody: operations.RegisterSchemaRequestBody{
			File: operations.RegisterSchemaFile{
				Content:  content,
				FileName: "example.file",
			},
		},
		APIID:     "<value>",
		VersionID: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.StatusCode)
}
